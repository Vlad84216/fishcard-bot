import os
import openai
import base64
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ API-–∫–ª—é—á–∞
openai.api_key = os.environ["OPENAI_API_KEY"]

# ‚úÖ –ü—Ä–æ–∫—Å–∏ OpenAI (–¥–æ–±–∞–≤–ª–µ–Ω–æ)
openai.proxy = {
    "http": "http://ddemoipl:zkv01bcgs6pz@23.95.150.145:6114",
    "https": "http://ddemoipl:zkv01bcgs6pz@23.95.150.145:6114"
}

BOT_TOKEN = os.environ["BOT_TOKEN"]

async def estimate_fish_parameters(photo_path):
    with open(photo_path, "rb") as image_file:
        image_bytes = image_file.read()
        image_base64 = base64.b64encode(image_bytes).decode("utf-8")

    response = openai.chat.completions.create(
        model="gpt-4o",
        messages=[
            {
                "role": "system",
                "content": "–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Ä—ã–±–∞–ª–∫–µ. –ù–∞ –æ—Å–Ω–æ–≤–µ —Ñ–æ—Ç–æ –æ—Ü–µ–Ω–∏ –≤–µ—Å –∏ –¥–ª–∏–Ω—É —Ä—ã–±—ã. –§–æ—Ä–º–∞—Ç —Å—Ç—Ä–æ–≥–æ: –í–µ—Å: ... –∫–≥\n–î–ª–∏–Ω–∞: ... —Å–º"
            },
            {
                "role": "user",
                "content": [
                    {
                        "type": "text",
                        "text": "–û—Ü–µ–Ω–∏ –ø–æ —Ñ–æ—Ç–æ –ø—Ä–∏–º–µ—Ä–Ω—ã–π –≤–µ—Å –∏ –¥–ª–∏–Ω—É —Ä—ã–±—ã. –û—Ç–≤–µ—Ç —Å—Ç—Ä–æ–≥–æ:\n–í–µ—Å: ... –∫–≥\n–î–ª–∏–Ω–∞: ... —Å–º"
                    },
                    {
                        "type": "image_url",
                        "image_url": {
                            "url": f"data:image/jpeg;base64,{image_base64}"
                        }
                    }
                ]
            }
        ],
        max_tokens=100
    )

    return response.choices[0].message.content

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ñ–æ—Ç–æ —Å–≤–æ–µ–π —Ä—ã–±—ã üé£")

async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    photo = update.message.photo[-1]
    file = await photo.get_file()
    await file.download_to_drive("fish.jpg")
    await update.message.reply_text("–§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ! –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é...")

    try:
        gpt_reply = await estimate_fish_parameters("fish.jpg")
        await update.message.reply_text(f"üß† GPT –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç:\n{gpt_reply}\n\n–•–æ—á–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å?")
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ñ–æ—Ç–æ: {e}")

def main():
    app = ApplicationBuilder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.PHOTO, handle_photo))
    app.run_polling()

if __name__ == '__main__':
    main()
